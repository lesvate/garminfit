////////////////////////////////////////////////////////////////////////////////
// The following FIT Protocol software provided may be used with FIT protocol
// devices only and remains the copyrighted property of Dynastream Innovations Inc.
// The software is being provided on an "as-is" basis and as an accommodation,
// and therefore all warranties, representations, or guarantees of any kind
// (whether express, implied or statutory) including, without limitation,
// warranties of merchantability, non-infringement, or fitness for a particular
// purpose, are specifically disclaimed.
//
// Copyright 2017 Dynastream Innovations Inc.
////////////////////////////////////////////////////////////////////////////////
// ****WARNING****  This file is auto-generated!  Do NOT edit this file.
// Profile Version = 20.46Release
// Tag = production/akw/20.46.00-0-g42b354e
////////////////////////////////////////////////////////////////////////////////


package com.onlydev.garminfit.controller;

import com.garmin.fit.*;
import com.onlydev.garminfit.model.Record;

import net.sf.json.JSONObject;

import java.io.FileInputStream;
import java.io.InputStream;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
@Controller
public class DecodeExample  implements FileIdMesgListener, UserProfileMesgListener, DeviceInfoMesgListener, MonitoringMesgListener, RecordMesgListener, DeveloperFieldDescriptionListener {
	
	private Map<String,Map<String, Object>> data;
	
	@RequestMapping(value = "/fit", method = RequestMethod.GET)
    public String  fit(Locale locale, Model model) {
		long s1 = System.currentTimeMillis();
		Map<String, Object> distance = new HashMap<String, Object>();
		Map<String, Object> heart_rate = new HashMap<String, Object>();
		Map<String, Object> cadence = new HashMap<String, Object>();
		Map<String, Object> speed = new HashMap<String, Object>();
		
		distance.put("name", "distance");
		heart_rate.put("name", "heart_rate");
		cadence.put("name", "cadence");
		speed.put("name", "speed");
		
		distance.put("unit", "km");
		heart_rate.put("unit", "bpm");
		cadence.put("unit", "rpm");
		speed.put("unit", "km/h");
		
		DecodeExample listener = new DecodeExample();
		listener.data = new HashMap<String, Map<String,Object>>();
		listener.data.put("distance", distance);
		listener.data.put("heart_rate", heart_rate);
		listener.data.put("cadence", cadence);
		listener.data.put("speed", speed);
		
        Decode decode = new Decode();
        //decode.skipHeader();        // Use on streams with no header and footer (stream contains FIT defn and data messages only)
        //decode.incompleteStream();  // This suppresses exceptions with unexpected eof (also incorrect crc)
        MesgBroadcaster mesgBroadcaster = new MesgBroadcaster( decode );
        FileInputStream in;

//        String file = "F:\\garmin\\Activities\\2016-09-24-08-56-35.fit";
        String file = "F:\\garmin\\Activities\\2016-09-15-05-54-12.fit";
        //System.out.printf( "FIT Decode Example Application - Protocol %d.%d Profile %.2f %s\n", Fit.PROTOCOL_VERSION_MAJOR, Fit.PROTOCOL_VERSION_MINOR, Fit.PROFILE_VERSION / 100.0, Fit.PROFILE_TYPE );


        try {
            in = new FileInputStream( file );
        } catch ( java.io.IOException e ) {
            throw new RuntimeException( "Error opening file " + file + " [1]" );
        }

        try {
            if ( !decode.checkFileIntegrity( (InputStream) in ) ) {
                throw new RuntimeException( "FIT file integrity failed." );
            }
        } catch ( RuntimeException e ) {
            System.err.print( "Exception Checking File Integrity: " );
            System.err.println( e.getMessage() );
            System.err.println( "Trying to continue..." );
        } finally {
            try {
                in.close();
            } catch ( java.io.IOException e ) {
                throw new RuntimeException( e );
            }
        }

        try {
            in = new FileInputStream( file );
        } catch ( java.io.IOException e ) {
            throw new RuntimeException( "Error opening file " + file + " [2]" );
        }

        mesgBroadcaster.addListener( (FileIdMesgListener) listener );
        mesgBroadcaster.addListener( (UserProfileMesgListener) listener );
        mesgBroadcaster.addListener( (DeviceInfoMesgListener) listener );
        mesgBroadcaster.addListener( (MonitoringMesgListener) listener );
        mesgBroadcaster.addListener( (RecordMesgListener) listener );

        decode.addListener( (DeveloperFieldDescriptionListener) listener );

        try {
            decode.read( in, mesgBroadcaster, mesgBroadcaster );
        } catch ( FitRuntimeException e ) {
            // If a file with 0 data size in it's header  has been encountered,
            // attempt to keep processing the file
            if ( decode.getInvalidFileDataSize() ) {
                decode.nextFile();
                decode.read( in, mesgBroadcaster, mesgBroadcaster );
            } else {
                System.err.print( "Exception decoding file: " );
                System.err.println( e.getMessage() );

                try {
                    in.close();
                } catch ( java.io.IOException f ) {
                    throw new RuntimeException( f );
                }

                return null;
            }
        }

        try {
            in.close();
        } catch ( java.io.IOException e ) {
            throw new RuntimeException( e );
        }

        Date date = new Date();
		DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale);
		
		JSONObject jsonObject  = JSONObject.fromObject(listener.data);
		String formattedDate = dateFormat.format(date);
        model.addAttribute("serverTime", formattedDate );
		model.addAttribute("list", jsonObject );
		long s2 = System.currentTimeMillis();
		System.out.println(s2-s1);
        return "fit";
    }


        @Override
        public void onMesg( FileIdMesg mesg ) {
            //System.out.println( "File ID:" );

            if ( mesg.getType() != null ) {
                //System.out.print( "   Type: " );
                //System.out.println( mesg.getType().getValue() );
            }

            if ( mesg.getManufacturer() != null ) {
                //System.out.print( "   Manufacturer: " );
                //System.out.println( mesg.getManufacturer() );
            }

            if ( mesg.getProduct() != null ) {
                //System.out.print( "   Product: " );
                //System.out.println( mesg.getProduct() );
            }

            if ( mesg.getSerialNumber() != null ) {
                //System.out.print( "   Serial Number: " );
                //System.out.println( mesg.getSerialNumber() );
            }

            if ( mesg.getNumber() != null ) {
                //System.out.print( "   Number: " );
                //System.out.println( mesg.getNumber() );
            }
        }

        @Override
        public void onMesg( UserProfileMesg mesg ) {
            //System.out.println( "User profile:" );

            if ( ( mesg.getFriendlyName() != null ) ) {
                //System.out.print( "   Friendly Name: " );
                //System.out.println( mesg.getFriendlyName() );
            }

            if ( mesg.getGender() != null ) {
                if ( mesg.getGender() == Gender.MALE ) {
                    //System.out.println( "   Gender: Male" );
                } else if ( mesg.getGender() == Gender.FEMALE ) {
                    //System.out.println( "   Gender: Female" );
                }
            }

            if ( mesg.getAge() != null ) {
                //System.out.print( "   Age [years]: " );
                //System.out.println( mesg.getAge() );
            }

            if ( mesg.getWeight() != null ) {
                //System.out.print( "   Weight [kg]: " );
                //System.out.println( mesg.getWeight() );
            }
        }

        @Override
        public void onMesg( DeviceInfoMesg mesg ) {
            //System.out.println( "Device info:" );

            if ( mesg.getTimestamp() != null ) {
                //System.out.print( "   Timestamp: " );
                //System.out.println( mesg.getTimestamp() );
            }

            if ( mesg.getBatteryStatus() != null ) {
                //System.out.print( "   Battery status: " );

                switch ( mesg.getBatteryStatus() ) {

                case BatteryStatus.CRITICAL:
                    //System.out.println( "Critical" );
                    break;
                case BatteryStatus.GOOD:
                    //System.out.println( "Good" );
                    break;
                case BatteryStatus.LOW:
                    //System.out.println( "Low" );
                    break;
                case BatteryStatus.NEW:
                    //System.out.println( "New" );
                    break;
                case BatteryStatus.OK:
                    //System.out.println( "OK" );
                    break;
                default:
                    //System.out.println( "Invalid" );
                }
            }
        }

        @Override
        public void onMesg( MonitoringMesg mesg ) {
            //System.out.println( "Monitoring:" );

            if ( mesg.getTimestamp() != null ) {
                //System.out.print( "   Timestamp: " );
                //System.out.println( mesg.getTimestamp() );
            }

            if ( mesg.getActivityType() != null ) {
                //System.out.print( "   Activity Type: " );
                //System.out.println( mesg.getActivityType() );
            }

            // Depending on the ActivityType, there may be Steps, Strokes, or Cycles present in the file
            if ( mesg.getSteps() != null ) {
                //System.out.print( "   Steps: " );
                //System.out.println( mesg.getSteps() );
            } else if ( mesg.getStrokes() != null ) {
                //System.out.print( "   Strokes: " );
                //System.out.println( mesg.getStrokes() );
            } else if ( mesg.getCycles() != null ) {
                //System.out.print( "   Cycles: " );
                //System.out.println( mesg.getCycles() );
            }

            printDeveloperData( mesg );
        }

        @Override
        public void onMesg( RecordMesg mesg ) {
            //System.out.println( "Record:" );
            printValues( mesg, RecordMesg.HeartRateFieldNum,data.get("heart_rate"));
            printValues( mesg, RecordMesg.CadenceFieldNum,data.get("cadence") );
            printValues( mesg, RecordMesg.DistanceFieldNum,data.get("distance"));
            printValues( mesg, RecordMesg.SpeedFieldNum,data.get("speed") );

            printDeveloperData( mesg );
        }

        private void printDeveloperData( Mesg mesg ) {
            for ( DeveloperField field : mesg.getDeveloperFields() ) {
                if ( field.getNumValues() < 1 ) {
                    continue;
                }

                if ( field.isDefined() ) {
                    //System.out.print( "   " + field.getName() );

                    if ( field.getUnits() != null ) {
                        //System.out.print( " [" + field.getUnits() + "]" );
                    }

                    //System.out.print( ": " );
                } else {
                    //System.out.print( "   Undefined Field: " );
                }

                //System.out.print( field.getValue( 0 ) );
                for ( int i = 1; i < field.getNumValues(); i++ ) {
                    //System.out.print( "," + field.getValue( i ) );
                }

                //System.out.println();
            }
        }

        @Override
        public void onDescription( DeveloperFieldDescription desc ) {
            //System.out.println( "New Developer Field Description" );
            //System.out.println( "   App Id: " + desc.getApplicationId() );
            //System.out.println( "   App Version: " + desc.getApplicationVersion() );
            //System.out.println( "   Field Num: " + desc.getFieldDefinitionNumber() );
        }

        private void printValues( Mesg mesg, int fieldNum,Map<String, Object> dataField ) {
            Iterable<FieldBase> fields = mesg.getOverrideField( (short) fieldNum );
            Field profileField = Factory.createField( mesg.getNum(), fieldNum );
            boolean namePrinted = false;

            if ( profileField == null ) {
                return;
            }

            for ( FieldBase field : fields ) {

                if ( field instanceof Field ) {
                	
                	if ( !namePrinted ) {
                		//System.out.println( "   " + profileField.getName() + ":" );
                		namePrinted = true;
                		
                		Object obj = dataField.get("data");
                		if(obj == null) {
                			
                			List dataList = new ArrayList();
                			dataList.add(field.getValue());
                			dataField.put("data", dataList);
                			
                		}else {
                			List dataList = (List)obj;
                			dataList.add(field.getValue());
                		}
                	}
                	
                	
//                    //System.out.println( "      native: " + field.getValue() );
                } else {
//                    //System.out.println( "      override: " + field.getValue() );
                }
            }
        }
}
